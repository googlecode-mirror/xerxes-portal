<?xml version="1.0" encoding="utf-8"?>
<xerxes version="1.4">

	<!-- <commands> define the basic behaviors of the system, mapping actions specified in the url or from the 
			 command line to command classes that fetch or update data as well as files for displaying the results 
		 of those actions -->
		 
	<commands>
	
		<!-- <default> defines the action to take if no 'base' or 'action' is defined in the request paramaters,
			this is in effect the home page of the application; must include a <section> and an <action> that 
			exists in the xml below -->
		
		<default>
			<section>databases</section>
			<action>categories</action>
		</default>
		
		<!-- <global> commands that should be executed with every request.  with each <command>
			include only the trailing name, such as 'Databases' in Xerxes_Command_Databases; typically these will 
			go in the 'commands/helper' directory
			
			@directory [required] = must correspond to the directory in the commands folder where the command classe lives
			@namespace [required]= the first part of the command class names, such as 'Xerxes' in Xerxes_Command_Databases 
		-->
		
		<global>
			<command directory="helper" namespace="Xerxes">HelperNavbar</command>
		</global>
		
		<!-- <formats> allows you to set an http header for the response; this is useful if the response needs to be something
			other than html.  Xerxes_Framework_FrontController::setHeader() includes a number of predefined formats.  those can
			be overriden here, or new formats can be defined. 
			
			@name [required] = the format key, this will correspond to format={name} in the querystring
			@header [required] = the http header to output
		-->
		
		<formats>
			<format name="local-format-name" header="Content-type: text/plain" />		
		</formats>

		<!-- <include>s specify files or directories to include in the application; in the case of the latter, 
			all php files in that directory will be included; you can also specify additional files or directories
			to include in each <section> or for specific <action>s	-->

		<include>lib/Xerxes/</include>
		
		<!-- <section>s group actions in the system, defining basic attributes for all <action>s within that section; 
				 each of the attributes here can be overriden by the <action>.
			 
			 @name [required] = this corresponds to the 'base' in the request paramaters
			 @directory [required] = must correspond to the directory in the commands folder where the command classes live
			 @namespace [required]= the first part of the command class names, such as 'Xerxes' in Xerxes_Command_Databases
			 @documentElement [required] = the name the document element in the xml response
			 @restricted [optional] = if true, this action is restricted to users who are authenticated (logged in) OR in the local campus range. See wiki for more info.  default false
			 @login [optional] = whether the user must be logged in under their username, default false
		 -->
	
		<section name="databases" directory="databases" namespace="Xerxes" documentElement="knowledge_base" restricted="false" login="false">	
			
			<!-- <action>s map specific actions to command classes and views
			
				@name [required] = this corresponds to 'action' in the request paramaters
				 @directory [optional] = override the location of the command class
				 @namespace [optional] = override the prefix of the command class
				 @restricted [optional] = override ip restriction
				 @documentElement [optional] = override the document element name
				 @login [optional] = override login restriction
				 @cli [optional] = whether action should be limited to command line interface, do not run from web; set value = true	
				
				 <command>s specify the command class to execute, include only the trailing name, such as 'Databases' 
				 	in Xerxes_Command_Databases; can be multiple <command>s, they will be executed in order
				 	
					@directory [optional] = override the location of the command class
				 	@namespace [optional] = override the prefix of the command class
					
				 <request>s are optional, and specify a parameter to include by default in the request
				 	@name = the request paramater attribute, so <request name="foo">bar</request> would be the equivalent
					of '&foo=bar' had it come in from the URL
					
				 <view> specifies the file to use to display the xml generated by the commands, by default will be
				 	an xslt file, but can be a php file. value should be the path to the view file from the base 
					directory of the instance. leave view empty as <view /> in the case of a redirect.
					
					you can specify more than one view file if the subsequent entiry displays the data in a different 
					format (e.g., rss); distinguish the additional views with the attribute @format; requests can 
					specify the appropriate view with the paramater format={name}.
					
					@type [optional] set to 'php' if the xml should be processed by custom php code, otherwise will default
						to xslt and the xml will be processesed by the XSLT processor
					@fomat [optional] additional views that are not aimed at displaying html should be distinguished here
						by the name of the format; name name must corresponding to a format in FrontController:setHeader() or
						optionally a user-defined format in <formats> above
			 --> 
			
			<action name="categories">
				<command>DatabasesCategories</command>
				<request name="use_categories_quicksearch">true</request>
				<command>DatabasesSubject</command>
				<view>xsl/databases_categories.xsl</view>
			</action>
			<action name="subject">
				<command>DatabasesSubject</command>
				<pathParamMap>
					<mapEntry pathIndex="2" property="subject"/>
				</pathParamMap>
				<view>xsl/databases_subject.xsl</view>
			</action>
			<action name="subject-opensearch">
				<request name="format">xml</request>
				<command>DatabasesSubject</command>
				<pathParamMap>
					<mapEntry pathIndex="2" property="subject"/>
				</pathParamMap>
				<view>xsl/databases_subject-opensearch.xsl</view>
			</action>
			<action name="old-subject">
				<command>DatabasesCategories</command>
				<view type="php">custom/databases_old-subject.php</view>
			</action>
			<action name="metasearch">
				<command>DatabasesSubject</command>
				<view>xsl/databases_metasearch.xsl</view>
			</action>
			<action name="jump">
				<command>DatabasesSubject</command>
				<view type="php">custom/databases_jump.php</view>
			</action>
			<action name="alphabetical">
				<command>DatabasesDatabase</command>
				<view>xsl/databases_alphabetical.xsl</view>
			</action>
			<action name="find">
				<request name="show_alpha_links">false</request>
				<request name="show_search_box">true</request>
				<command>DatabasesDatabase</command>
				<command>DatabasesRedirectOneResult</command>
				<view>xsl/databases_alphabetical.xsl</view>
			</action>
			<action name="database">
				<command>DatabasesDatabase</command>
				<pathParamMap>
					<mapEntry pathIndex="2" property="id"/>
				</pathParamMap>
				<view>xsl/databases_database.xsl</view>		
			</action>
			<action name="proxy">
				<pathParamMap>
					<mapEntry pathIndex="2" property="database"/>
				</pathParamMap>
				<command>DatabasesProxy</command>
				<view />
			</action>
			<action name="populate" cli="true">
				<command>PopulateDatabases</command>
				<view />
			</action>
			<!-- See http://code.google.com/p/xerxes-portal/wiki/EzProxyExport -->
			<action name="ezproxy-export">
				<command>DatabasesDatabase</command>
				<view type="php">php-views/ezproxy-export.php</view>
			</action>
		</section>
		
		<section name="embed" directory="embed" namespace="Xerxes" documentElement="xerxes">
			<action name="gen_subject">
				<pathParamMap>
					<mapEntry pathIndex="2" property="subject"/>
				</pathParamMap>
				<command directory="databases">DatabasesSubject</command>
				<command>EmbedGenSubject</command>
				<view>xsl/embed/embed_gen_subject.xsl</view>
			</action>
			<action name="gen_database">
				<!-- cheesy easy way to get the reported pass-through URL to be
				     an absolute url is to set this request var -->
				<request name="gen_full_urls">true</request>

				<pathParamMap>
					<mapEntry pathIndex="2" property="id"/>
				</pathParamMap>
				<command directory="databases">DatabasesDatabase</command>
				<command>EmbedGenDatabase</command>
				<view>xsl/embed/embed_gen_database.xsl</view>
			</action>
			<action name="subject">
				<command directory="databases">DatabasesSubject</command>
				<pathParamMap>
					<mapEntry pathIndex="2" property="subject"/>
				</pathParamMap>
				<view>xsl/embed/embed_subject.xsl</view>
			</action>
			<action name="database">
				<command directory="databases">DatabasesDatabase</command>
				<pathParamMap>
					<mapEntry pathIndex="2" property="id" />
				</pathParamMap>
				<view>xsl/embed/embed_database.xsl</view>
			</action>	
		</section>
		
		<section name="authenticate" directory="authenticate" namespace="Xerxes" documentElement="authenticate">
			<action name="login">
				<command>AuthenticateLogin</command>
				<view>xsl/authenticate_login.xsl</view>
			</action>
      <!-- exact duplicate of login method, useful if one of them is
           shibboleth protected and one not. -->
      <action name="login2">
        <command>AuthenticateLogin</command>
				<view>xsl/authenticate_login.xsl</view>
      </action>
			<action name="logout">
				<command>AuthenticateLogout</command>
				<view>xsl/authenticate_logout.xsl</view>
			</action>
			<action name="guest">
				<command>AuthenticateGuest</command>
				<view />
			</action>
			<action name="cas-validate">
				<command>AuthenticateCasValidate</command>
				<view />
			</action>
		</section>
		
		<section name="folder" directory="folder" namespace="Xerxes" documentElement="folder" restricted="true">	
			<pathParamMap>
				<mapEntry pathIndex="2" property="username"/>
			</pathParamMap>
			<action name="home">
				<request name="limit">true</request>
				<command>FolderResults</command>
				<command directory="availability">AvailabilityInjectFullText</command>
				<command>FolderTags</command>
				<command>FolderPaging</command>
				<view>xsl/folder_home.xsl</view>
			</action>
			<action name="full">
				<pathParamMap>
					<mapEntry pathIndex="3" property="record" />
				</pathParamMap>			
				<command>FolderResults</command>
				<!-- FolderTags for tag autocomplete --> 
				<command directory="folder">FolderTags</command>
				<view>xsl/folder_full.xsl</view>
			</action>
			<action name="output_email">
				<request name="view">brief</request>
				<command>FolderResults</command>
				<command>FolderTags</command>
				<view>xsl/folder_output_email.xsl</view>
			</action>
			<action name="output_export_text">
				<request name="view">brief</request>
				<command>FolderResults</command>
				<command>FolderTags</command>
				<view>xsl/folder_output_export_text.xsl</view>
			</action>
			<action name="output_export_endnote">
				<request name="view">brief</request>
				<command>FolderResults</command>
				<command>FolderTags</command>
				<view>xsl/folder_output_export_endnote.xsl</view>
			</action>
			<action name="output_refworks">
				<request name="view">brief</request>
				<command>FolderResults</command>
				<command>FolderTags</command>
				<view>xsl/folder_output_refworks.xsl</view>
			</action>>
			<action name="export">
				<command>FolderResults</command>
				<view format="text-file">xsl/citation/basic.xsl</view>
				<view format="ris-file">xsl/citation/ris.xsl</view>
				<view format="bibliographic">xsl/citation/ris.xsl</view>
			</action>
			<action name="email">
				<command>FolderResults</command>
				<command>FolderEmail</command>
				<view />
			</action>
			<action name="refworks-bounce">
				<request name="view">brief</request>
				<command>FolderResults</command>
				<command>FolderRefworksBounce</command>
				<view />
			</action>
			<action name="fetch" restricted="false" login="false">
				<request name="doNotEnforceLogin">true</request>
				<command>FolderResults</command>
				<view format="ris">xsl/citation/ris.xsl</view>
			</action>
			<action name="delete">
				<command>FolderDelete</command>
				<view />
			</action>
			<action name="tags_edit">
				<command>FolderTagsEdit</command>
				<view>xsl/folder_tags_edit.xsl</view>
			</action>
			<action name="tags_edit_ajax">
				<command>FolderTagsEdit</command>
				<view>xsl/folder_tags_edit_ajax.xsl</view>
			</action>
			<action name="redirect" restricted="false">
				<command>FolderRedirect</command>
				<view />
			</action>
		</section>
		
		<section name="availability" directory="availability" namespace="Xerxes" documentElement="xerxes">

			<!-- fulltext and refereed are depricated since version 1.2 in favor of the 'inject'
				equivalent commands, which are included now as part of actions in metasearch
				and folder sections -->
			
			<action name="fulltext">
				<command>AvailabilityFulltext</command>
				<view />
			</action>
			<action name="refereed">
				<command>AvailabilityRefereed</command>
				<view />
			</action>
			
			<action name="populate" cli="true">
				<command>PopulateFulltext</command>
				<view />
			</action>
		</section>
		
		<section name="metasearch" directory="metasearch" namespace="Xerxes" documentElement="metasearch" restricted="true">	
			
			<action name="search">
				<command>MetasearchSearch</command>
				<view />
			</action>
			<action name="hits">
				<command>MetasearchHits</command>
				<view>xsl/metasearch_hits.xsl</view>
			</action>
			<action name="results">
				<command>MetasearchResults</command>
				<command directory="availability">AvailabilityInjectRefereed</command>
				<command directory="availability">AvailabilityInjectFullText</command>
				<command>MetasearchCheckSaved</command>
				<command directory="folder">FolderTags</command>
				<command>MetasearchPaging</command>
				<pathParamMap>
					<mapEntry pathIndex="2" property="group"/>
					<mapEntry pathIndex="3" property="resultSet"/>
				</pathParamMap>
				<view>xsl/metasearch_results.xsl</view>
			</action>
			<action name="facet">
				<command>MetasearchFacet</command>
				<command directory="availability">AvailabilityInjectRefereed</command>
				<command directory="availability">AvailabilityInjectFullText</command>
				<command>MetasearchPaging</command>
				<view>xsl/metasearch_results.xsl</view>
			</action>
			<action name="sfx">
				<command>MetasearchSFX</command>
				<view />
			</action>
			<action name="sort">
				<command>MetasearchSort</command>
				<view />
			</action>
			<action name="save-delete">
				<command>MetasearchSaveDelete</command>
				<view>xsl/metasearch_save-delete.xsl</view>
				<view format="json">xsl/metasearch_save-delete_ajax.xsl</view>
			</action>
			<action name="record">
				<command>MetasearchRecord</command>
				<!-- FolderTags for tag autocomplete --> 
				<command directory="folder">FolderTags</command>
				<command directory="availability">AvailabilityInjectRefereed</command>
				<command>MetasearchCheckSaved</command>
				<view>xsl/metasearch_record.xsl</view>
			</action>
		</section>
		
		<!-- mango and rss are experimental in 1.4 -->

		<section name="books" directory="mango" namespace="Mango" documentElement="metasearch" restricted="true">	
			<include>lib/Mango/</include>
			<action name="home">
				<view>xsl/mango_home.xsl</view>
			</action>
			<action name="advanced">
				<request name="advancedfull">true</request>
				<view>xsl/mango_home.xsl</view>
			</action>
			<action name="results">
				<pathParamMap>
					<mapEntry pathIndex="2" property="source"/>
					<mapEntry pathIndex="3" property="query"/>
				</pathParamMap>
				<command>MangoResults</command>
				<command>MangoLookupInject</command>
				<command namespace="Xerxes" directory="metasearch">MetasearchCheckSaved</command>
				<command>MangoPaging</command>
				<command namespace="Xerxes" directory="folder">FolderTags</command>
				<view>xsl/mango_results.xsl</view>
			</action>
			<action name="ill">
				<command>MangoILL</command>
				<view />
			</action>
			<action name="missing">
				<command>MangoMissing</command>
				<view format="rss">xsl/mango_missing.xsl</view>
			</action>
			<action name="record">
				<pathParamMap>
					<mapEntry pathIndex="2" property="oclc"/>
				</pathParamMap>
				<command>MangoRecord</command>
				<command>MangoAmazon</command>
				<command>MangoRecommend</command>
				<command>MangoLookupInject</command>
				<command namespace="Xerxes" directory="metasearch">MetasearchCheckSaved</command>
				<view>xsl/mango_record.xsl</view>
				<view format="marc">xsl/marc-display.xsl</view>
			</action>
			<action name="save-delete">
				<command>MangoSaveDelete</command>
				<view>xsl/metasearch_save-delete.xsl</view>
				<view format="json">xsl/metasearch_save-delete_ajax.xsl</view>
			</action>
			<action name="update" cli="true">
				<command>MangoUpdateHoldings</command>
			</action>
		</section>

		<section name="rss" directory="rss" namespace="Xerxes" documentElement="xerxes" restricted="true">	
			<include>lib/RSS/</include>
			<action name="search">
				<command>RSSSearch</command>
				<view>xsl/rss_results.xsl</view>
			</action>
			<action name="load" cli="true">
				<command>RSSLoad</command>
				<view />
			</action>
			<action name="enhance" cli="true">
				<command>RSSEnhance</command>
				<view />
			</action>
			<action name="index" cli="true">
				<command>RSSIndex</command>
				<view />
			</action>
			<action name="feed">
				<request name="format">rss</request>
				<pathParamMap>
					<mapEntry pathIndex="2" property="id"/>
				</pathParamMap>
				<command>RSSCreate</command>
				<view>xsl/utility/xerxes-to-rss.xsl</view>
			</action>
		</section>		
	</commands>
</xerxes>
