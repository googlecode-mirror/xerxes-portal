#summary Tips for applying local customizations sustainably

= Introduction =

Tips for applying local customizations to Xerxes in a way that minimizes the pain of upgrades. 

= XSLT =

The key to successful local customizations is doing them carefully and surgically. 

You don't need to (and shoudln't) actually make changes to files in Xerxes own lib/xsl directory. Instead, you provide 'overrides' in your local app's lib/xsl directory, that override Xerxes' definitions. This will make upgrades a lot less painful for you. 

Don't copy an entire file into a local over-ride, if you can get away with just one or a few templates, variables, or other xsl elements from that file. To understand how to do that, it's better if you have some basic understanding of XSLT (there are some good books), or consult with us on the list our time allowing. 

If you find yourself needing to over-ride an entire large template just to customize one tiny part of it, and this is something that's unlikely to be unique just to you -- that's a sign that we need to refactor Xerxes XSLT to give you a more granular template or variable to over-ride. 

If it's likely to be a very common use case, and it's feasible to do so, we should build it into Xerxes core so you can get the functionality without over-riding any XSLT at all. Like the holdings and original_record links from Metalib I'm building into the standard distro. 

== Basic XSL Over-riding process ==

You don't need to customize an entire .xsl *file*, but you generally need to customize at the level of <xsl:template> tags, or <xsl:variable> tags.  So you first need to identify the smallest unit you can customize to get your desired behavior, either a template or a variable. (Lots of templates or variables are in the common includes.xsl file, not just in the particular .xsl file used for the particular page).  Then, you make a file in your local app's /xsl directory with the same name as the file you found the template or variable in, and put *just* the template or variable you want to 'override' in there with your new/changed definition. 

There are some cases where this won't work though (doh!).  In those cases, you can usually just stick the variable or template you want to override in your local includes.xsl file instead.  But if you run into one of those cases, ask us, there might be a better way.

== So... ==


So you shouldn't be afraid to ask on the list about what you're doing, if we have time we can provide you hints on the best way to do it, and may also realize that Xerxes core should be changed to make it easier or more reliable to do what you want. And definitely a little bit of XSLT knowledge on your part will help you understand what you're doing, so you can make customizations while maximizing maintainability.



= CSS =

== 'Branded' content, headers/footers ==

All of your branded content (headers footers) that you're putting into 
your local Xerxes XSLT, wrap it in one or more: <div 
class="my_university_branding"> (obviously "my_university_branding" can 
be anything).

Now take the CSS stylesheet that is meant to go with that branded 
content, and prepend every single CSS decleration with:

.my_university_branding (space)

Now your university branding CSS only applies to your specific branded 
content, and not to the rest of Xerxes. Put this branding CSS in a 
separate file, and make sure it's included by Xerxes, AFTER the built-in 
Xerxes CSS. (we should make sure to have an easy documented way to 
include an additional stylesheet in Xerxes with minimal over-ride changes. TODO: What is it?).

This won't usually get you 100% of the way there, but may get you 80 or 
90% and save you some time, and clarify what the remaining merge issues 
are.  To the extent it lets you _avoid_ editing Xerxes own CSS 
(determined by your needs, and whether you're going to need to 
significantly alter Xerxes content to match your branding) -- it should 
also make upgrades a lot easier.

== CSS as cascading over-rides, not as copy-and-edit ==

If you DO need to change Xerxes CSS itself, do it as CSS 'overrides' in 
this new local CSS file you are creating, do NOT do it by copying the 
entire xerxes css file and editing what you want.  Similar to our XSLT 
overrides instead of copy-and-edits, this will also make upgrades a lot 
less painful.