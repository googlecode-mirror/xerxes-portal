#summary 5. Upgrading between versions

= Upgrading between versions =

Here are the basic steps for upgrading between versions of Xerxes.

==1. Download and update the PHP and XSLT files==
 
Download the latest version of the code from the download section or check it out from the latest version branch in the svn repository.  

How you update the files is up to  you.  You should be safe to _replace_ the lib/, commands/, and sql/ directories in your existing instance.  But you'll need to take care in updating the interface directory (called demo in the source) so as not to overwrite local files, particularly files you've changed in the config/ and css/ directories.

One strategy is to keep a shadow copy of your demo/ folder with *only* the directories and files you've changed.  In that way, you can simply download the latest code to a new location, and then copy your customized files to that new location to overwrite what is there.  Then you can test the new version with your customizations.
 
==2. In MySQL, execute sql/create-kb.sql==
 
Every time you upgrade, you should execute the latest sql/create-kb.sql file.  This will drop and recreate (with any new definitions) the tables that Xerxes uses to cache the Metalib knowledgebase. Do that in MySQL and then run the Xerxes populate databases command from the command line.  In that way, Xerxes will refresh its cache.
 
==3. In MySQL, execute sql/migrate/migrate-1.3-to-1.4.sql==
 
_substitute 1.3 and 1.4 above with the actual version number_. This will update the other tables Xerxes uses.  Since these other tables include data that cannot be easily recreated (e.g., your users' saved records), you should *always* run the migrate sql rather than the create-serv.sql, since the latter will drop your tables.